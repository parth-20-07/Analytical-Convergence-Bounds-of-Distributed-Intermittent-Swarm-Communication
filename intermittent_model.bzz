#
# In the ARGoS window, you can move the camera with the following commands:
#
# - Translation: W A S D Q E keys, right-click + drag
# - Rotation: left-click + drag
#
# Selection: shift-click on the robot
# Remove selection: shift-click elsewhere
#
# Bug: selection is finnicky in the top-down view (Camera 1).
# Solution: switch to another camera and it'll work.
#

#
# Compiling and running the code
#
# - In the ARGoS window: Pause the simulation (if it's not paused already)
# - In the editor: do what you need, save, press the "Execute" button
# - In the ARGoS window: Press the "Play", "Step", or "Fast Forward" buttons
#

#
# This editor sucks.
#
# I know.
#
# But when it's open, it detects whether the open files have been modified elsewhere.
# So open this editor and then open the file you wanna edit in your favorite editor.
# When you save in your editor, the changes will be reflected here. Press Execute to compile and run.
# If you want syntax highlighting, JavaScript is pretty similar to Buzz.
#

# This function is executed once at init time

	

function init() {
	math.rng.setseed(id)

	gotoNetworkOrigins[0][0] = -2;
	gotoNetworkOrigins[0][1] = -2;

	gotoNetworkOrigins[1][0] = 2;
	gotoNetworkOrigins[1][1] = 2;

	task = 0

	networkToReach = -1

	networkID = -1
	
	curiosity = 0.0

	stepsSinceStart = 0

	utility = 1.0

	a = 1.0
	b = 1.0
	c = 1.0
	
	flow = 1.0
	connectability = 0.1

	if((id == 0) || (id == 10)){
		networkID = id/10
		networkToReach = id/10
	}

	
}



function Task0(){
	#carry out task 0 
}

function goToNetworkOrigin( networkIndex ){
	gotopointx = gotoNetworkOrigins[networkIndex][0]
	gotopointy = gotoNetworkOrigins[networkIndex][1]
	#
	
	
}

function evaluatePhi(){
	return (a * utility) + (b * flow) - (c*(curiosity * connectability))
}

function updateVariables(){
	stepsSinceStart = stepsSinceStart + 1

	if(task == 0){
		curiosity = curiosity + 1.0;
		connectability = #distance between current position and goto
		#check for if it is becoming a data mule. If it is, send a packet to inform the network.
		if(evaluatePhi() < 0.0){
			networkToReach = !networkID
			task = 1

			#broadcast to neighbors, "reset curiosoty"
		}
	}else{
		#if a neighbor exists, if it is of unique network ID, change task and broadcast packets as needed. Adopt neighbors network ID.
		#possibility for "handshake" task swapping

	}
}

function step() {
	if((id == networkID) || (task = 1)){
		goToNetworkOrigin(networkToReach)
	}else{
		Task0()
	}

	updateVariables()
}


# This function is executed when you press the reset button
function reset() {
}

# This function is executed once when you close the simulator
function destroy() {
}
